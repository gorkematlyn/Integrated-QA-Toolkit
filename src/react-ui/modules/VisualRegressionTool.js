import React, { useState } from 'react';
import { FiImage, FiRefreshCw, FiDownload, FiTrash2, FiZap } from 'react-icons/fi';

const VisualRegressionTool = () => {
  const [baselineImage, setBaselineImage] = useState(null);
  const [testImage, setTestImage] = useState(null);
  const [diffResult, setDiffResult] = useState(null);
  const [isComparing, setIsComparing] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  
  const handleBaselineUpload = (e) => {
    const file = e.target.files[0];
    if (file && file.type.startsWith('image/')) {
      setBaselineImage({
        file,
        preview: URL.createObjectURL(file)
      });
    } else {
      alert('Please select a valid image file');
    }
  };
  
  const handleTestImageUpload = (e) => {
    const file = e.target.files[0];
    if (file && file.type.startsWith('image/')) {
      setTestImage({
        file,
        preview: URL.createObjectURL(file)
      });
    } else {
      alert('Please select a valid image file');
    }
  };
  
  const handleCompare = async () => {
    if (!baselineImage || !testImage) return;
    
    setIsComparing(true);
    setDiffResult(null);
    
    try {
      // In a real implementation, this would call the Electron IPC API
      // For demo, we'll simulate a response after a delay
      setTimeout(() => {
        // Create a dummy diff image using the baseline image
        // In a real app, this would be generated by the backend
        const canvas = document.createElement('canvas');
        const img = new Image();
        img.src = baselineImage.preview;
        
        img.onload = () => {
          canvas.width = img.width;
          canvas.height = img.height;
          const ctx = canvas.getContext('2d');
          
          // Draw baseline image
          ctx.drawImage(img, 0, 0);
          
          // Highlight some "differences" with red rectangles
          ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';
          ctx.fillRect(120, 50, 100, 30);
          ctx.fillRect(320, 250, 200, 50);
          
          // Convert to data URL
          const diffImageUrl = canvas.toDataURL('image/png');
          
          // Set the diff result
          setDiffResult({
            diffImageUrl,
            pixelDifference: 423,
            diffPercentage: 2.45,
            matchScore: 97.55,
            diffRegions: [
              { x: 120, y: 50, width: 100, height: 30 },
              { x: 320, y: 250, width: 200, height: 50 }
            ]
          });
          
          setIsComparing(false);
        };
      }, 2000);
      
    } catch (error) {
      console.error('Error comparing images:', error);
      setIsComparing(false);
    }
  };
  
  const handleReset = () => {
    if (baselineImage) URL.revokeObjectURL(baselineImage.preview);
    if (testImage) URL.revokeObjectURL(testImage.preview);
    
    setBaselineImage(null);
    setTestImage(null);
    setDiffResult(null);
  };
  
  const exportReport = () => {
    setIsExporting(true);
    
    setTimeout(() => {
      // Base64 formata dönüştürme işlemi
      const getBase64Image = (imgUrl) => {
        return new Promise((resolve) => {
          const img = new Image();
          img.crossOrigin = 'Anonymous';
          img.onload = () => {
            const canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            resolve(canvas.toDataURL('image/png'));
          };
          img.src = imgUrl;
        });
      };
      
      // Tüm görselleri base64'e dönüştürüp HTML raporu oluştur
      Promise.all([
        getBase64Image(baselineImage.preview),
        getBase64Image(testImage.preview),
        getBase64Image(diffResult.diffImageUrl)
      ]).then(([baselineDataUrl, testDataUrl, diffDataUrl]) => {
        // Create a simple HTML report
        const content = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Visual Regression Report</title>
          <style>
            body { font-family: Arial, sans-serif; max-width: 900px; margin: 0 auto; padding: 20px; }
            h1 { color: #4285F4; }
            .stats { display: flex; gap: 20px; margin-bottom: 20px; }
            .stat-card { flex: 1; padding: 15px; border-radius: 8px; background-color: #F9FAFB; }
            .images { display: flex; flex-wrap: wrap; gap: 20px; }
            .image-container { flex: 1; min-width: 250px; border: 1px solid #E5E7EB; border-radius: 8px; padding: 10px; }
            .image-container img { max-width: 100%; }
            h3 { margin-top: 0; }
          </style>
        </head>
        <body>
          <h1>Visual Regression Report</h1>
          <p>Generated: ${new Date().toLocaleString()}</p>
          
          <div class="stats">
            <div class="stat-card">
              <h3>Match Score</h3>
              <p>${diffResult.matchScore}%</p>
            </div>
            <div class="stat-card">
              <h3>Pixel Difference</h3>
              <p>${diffResult.pixelDifference} pixels</p>
            </div>
            <div class="stat-card">
              <h3>Difference Percentage</h3>
              <p>${diffResult.diffPercentage}%</p>
            </div>
          </div>
          
          <div class="images">
            <div class="image-container">
              <h3>Baseline Image</h3>
              <img src="${baselineDataUrl}" alt="Baseline" />
            </div>
            <div class="image-container">
              <h3>Test Image</h3>
              <img src="${testDataUrl}" alt="Test" />
            </div>
            <div class="image-container">
              <h3>Difference Overlay</h3>
              <img src="${diffDataUrl}" alt="Diff" />
            </div>
          </div>
          
          <h2>Diff Regions</h2>
          <ul>
            ${diffResult.diffRegions.map(region => 
              `<li>Region at (${region.x}, ${region.y}) with size ${region.width}x${region.height}</li>`
            ).join('')}
          </ul>
        </body>
        </html>
        `;
        
        // Trigger download
        const blob = new Blob([content], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `visual-regression-report-${new Date().toISOString().split('T')[0]}.html`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        
        setIsExporting(false);
      });
    }, 1000);
  };
  
  return (
    <div className="container mx-auto px-4 py-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          Visual Regression Tool
        </h1>
        <p className="text-gray-600 dark:text-gray-300">
          Compare screenshots and identify visual differences between versions
        </p>
      </div>
      
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-card p-6 mb-6">
        <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Upload Screenshots</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          {/* Baseline Image Upload */}
          <div className="flex flex-col">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Baseline Image (Previous Version)
            </label>
            
            <div 
              className="border-2 border-dashed border-gray-300 dark:border-gray-700 rounded-lg p-6 text-center cursor-pointer hover:border-primary/20 transition-all flex-grow flex flex-col items-center justify-center"
              onClick={() => document.getElementById('baseline-input').click()}
            >
              <input 
                id="baseline-input" 
                type="file" 
                accept="image/*" 
                onChange={handleBaselineUpload} 
                className="hidden"
              />
              
              {baselineImage ? (
                <div className="w-full">
                  <img 
                    src={baselineImage.preview} 
                    alt="Baseline preview" 
                    className="max-h-52 mx-auto object-contain mb-2 border border-gray-200 dark:border-gray-700 rounded"
                  />
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-2 truncate">
                    {baselineImage.file.name}
                  </p>
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center">
                  <FiImage className="w-10 h-10 text-gray-400 mb-4" />
                  <p className="text-gray-700 dark:text-gray-300 font-medium">Upload Baseline Image</p>
                  <p className="text-gray-500 dark:text-gray-400 text-sm mt-1">Click or drag & drop</p>
                </div>
              )}
            </div>
          </div>
          
          {/* Test Image Upload */}
          <div className="flex flex-col">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Test Image (Current Version)
            </label>
            
            <div 
              className="border-2 border-dashed border-gray-300 dark:border-gray-700 rounded-lg p-6 text-center cursor-pointer hover:border-primary/20 transition-all flex-grow flex flex-col items-center justify-center"
              onClick={() => document.getElementById('test-input').click()}
            >
              <input 
                id="test-input" 
                type="file" 
                accept="image/*" 
                onChange={handleTestImageUpload}
                className="hidden"
              />
              
              {testImage ? (
                <div className="w-full">
                  <img 
                    src={testImage.preview} 
                    alt="Test preview" 
                    className="max-h-52 mx-auto object-contain mb-2 border border-gray-200 dark:border-gray-700 rounded"
                  />
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-2 truncate">
                    {testImage.file.name}
                  </p>
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center">
                  <FiImage className="w-10 h-10 text-gray-400 mb-4" />
                  <p className="text-gray-700 dark:text-gray-300 font-medium">Upload Test Image</p>
                  <p className="text-gray-500 dark:text-gray-400 text-sm mt-1">Click or drag & drop</p>
                </div>
              )}
            </div>
          </div>
        </div>
        
        <div className="flex flex-wrap gap-3">
          <button 
            onClick={handleCompare} 
            disabled={!baselineImage || !testImage || isComparing}
            className="btn-primary flex items-center"
          >
            {isComparing ? (
              <>
                <FiRefreshCw className="w-4 h-4 mr-2 animate-spin" />
                Comparing...
              </>
            ) : (
              <>
                <FiZap className="w-4 h-4 mr-2" />
                Compare Images
              </>
            )}
          </button>
          
          <button 
            onClick={handleReset}
            disabled={!baselineImage && !testImage}
            className="btn-secondary flex items-center"
          >
            <FiTrash2 className="w-4 h-4 mr-2" />
            Reset
          </button>
        </div>
      </div>
      
      {diffResult && (
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-card p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Comparison Results</h2>
            <button 
              className="btn-secondary flex items-center text-sm py-1"
              onClick={exportReport}
              disabled={isExporting}
            >
              {isExporting ? (
                <>
                  <FiRefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  Exporting...
                </>
              ) : (
                <>
                  <FiDownload className="w-4 h-4 mr-2" />
                  Download Report
                </>
              )}
            </button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
            <div className="bg-gray-50 dark:bg-gray-900 p-4 rounded-lg text-center">
              <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Match Score</h3>
              <p className="text-3xl font-bold text-primary">{diffResult.matchScore}%</p>
            </div>
            
            <div className="bg-gray-50 dark:bg-gray-900 p-4 rounded-lg text-center">
              <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Pixel Difference</h3>
              <p className="text-3xl font-bold text-primary">{diffResult.pixelDifference}</p>
            </div>
            
            <div className="bg-gray-50 dark:bg-gray-900 p-4 rounded-lg text-center">
              <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Difference Percentage</h3>
              <p className="text-3xl font-bold text-primary">{diffResult.diffPercentage}%</p>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-3">
              <h4 className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2 text-center">Baseline Image</h4>
              <div className="bg-gray-100 dark:bg-gray-900 rounded p-2">
                <img 
                  src={baselineImage?.preview} 
                  alt="Baseline" 
                  className="max-w-full h-auto object-contain mx-auto"
                />
              </div>
            </div>
            
            <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-3">
              <h4 className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2 text-center">Test Image</h4>
              <div className="bg-gray-100 dark:bg-gray-900 rounded p-2">
                <img 
                  src={testImage?.preview} 
                  alt="Test" 
                  className="max-w-full h-auto object-contain mx-auto"
                />
              </div>
            </div>
            
            <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-3">
              <h4 className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2 text-center">Difference Overlay</h4>
              <div className="bg-gray-100 dark:bg-gray-900 rounded p-2">
                <img 
                  src={diffResult.diffImageUrl} 
                  alt="Difference" 
                  className="max-w-full h-auto object-contain mx-auto"
                />
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VisualRegressionTool; 